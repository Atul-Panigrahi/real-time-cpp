#
#  Copyright Christopher Kormanyos 2007 - 2013.
#  Distributed under the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt
#  or copy at http://www.boost.org/LICENSE_1_0.txt)
#

# ------------------------------------------------------------------------------
# 
# Makefile
#
# Build file for the reference application using the GNU tools
#
# Based on GNU Make 3.81
#
# 07-April-2010
#
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# compiler location, build from GCC version and GCC target
# ------------------------------------------------------------------------------
COMPILER_DIRECTORY = gcc-$(GCC_VERSION)-$(GCC_TARGET)


# ------------------------------------------------------------------------------
# paths
# ------------------------------------------------------------------------------
PATH_TOOLS           = tools
PATH_TOOLS_UTIL      = $(PATH_TOOLS)\Util
PATH_TOOLS_MINGW     = $(PATH_TOOLS_UTIL)\MinGW\msys\1.0
PATH_TOOLS_MINGW_BIN = $(PATH_TOOLS_MINGW)\bin
PATH_TOOLS_CC        = $(PATH_TOOLS_MINGW)\local\$(COMPILER_DIRECTORY)\bin

PATH_APP       = src
PATH_TGT       = target/micros/$(TGT)
PATH_APP_MAKE  = target/app/make
PATH_TGT_MAKE  = $(PATH_TGT)/make
PATH_BIN       = bin
PATH_TMP       = tmp
PATH_OBJ       = $(PATH_TMP)/obj
PATH_SRC       = $(PATH_TMP)/src
PATH_ERR       = $(PATH_TMP)/err


# ------------------------------------------------------------------------------
# temporary files / helpers
# ------------------------------------------------------------------------------
HEX_MANIP_SCRIPT_FILE = $(PATH_TGT_MAKE)/$(TGT)_hex_manip_script.hxm


# ------------------------------------------------------------------------------
# include files
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_files.gmk      # Application file list
include $(PATH_TGT_MAKE)/$(TGT)_files.gmk   # Target filelist
include $(PATH_TGT_MAKE)/$(TGT)_flags.gmk   # Target compiler flags


# ------------------------------------------------------------------------------
# the application
# ------------------------------------------------------------------------------
APP = $(PATH_BIN)/ref_app

# ------------------------------------------------------------------------------
# object files
# ------------------------------------------------------------------------------
FILES_TMP   = $(FILES_CPP) $(FILES_TGT)
FILES_O     = $(addprefix $(PATH_OBJ)/, $(notdir $(addsuffix .o, $(FILES_TMP))))


# ------------------------------------------------------------------------------
# linker definition file
# ------------------------------------------------------------------------------
LINKER_DEFINITION_FILE   = $(PATH_TGT_MAKE)/$(TGT).ld


# ------------------------------------------------------------------------------
# VPATH definition
#
# VPATH is required for the maker to find the C-/ASM-Source files.
# Extract the directory/module names from the file list with the dir
# command and remove the duplicated directory names with the sort command.
# FILES_PRJ is listed first to make sure that the source files in the project
# directory are searched first.
# ------------------------------------------------------------------------------
VPATH := $(sort $(dir $(FILES_TMP)))


# ------------------------------------------------------------------------------
# Development tools
# ------------------------------------------------------------------------------
AR        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-ar.exe
AS        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-g++.exe
CC        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-g++.exe
CL        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-g++.exe
CPPFILT   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-c++filt.exe
HEX_MANIP = $(PATH_TOOLS)\generic\hex_tools\HexManip.exe
NM        = $(PATH_TOOLS_CC)\$(GCC_TARGET)-nm.exe
OBJDUMP   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-objdump.exe
OBJCOPY   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-objcopy.exe
READELF   = $(PATH_TOOLS_CC)\$(GCC_TARGET)-readelf.exe
SIZE      = $(PATH_TOOLS_CC)\$(GCC_TARGET)-size.exe

ECHO      = $(PATH_TOOLS_MINGW_BIN)\echo.exe
MAKE      = $(PATH_TOOLS_MINGW_BIN)\make.exe
MKDIR     = $(PATH_TOOLS_MINGW_BIN)\mkdir.exe
RM        = $(PATH_TOOLS_MINGW_BIN)\rm.exe
SED       = $(PATH_TOOLS_MINGW_BIN)\sed.exe


# ------------------------------------------------------------------------------
# Tool parameters
# ------------------------------------------------------------------------------
C_INCLUDES = -I$(PATH_APP)                      \
             -I$(PATH_APP)/mcal/$(TGT)

GCCFLAGS    = $(C_INCLUDES)                     \
              $(TGT_CFLAGS)                     \
              -g                                \
              -Wall                             \
              -Wextra                           \
              -pedantic                         \
              -Wmain                            \
              -Wundef                           \
              -Wsign-conversion                 \
              -Wfloat-equal                     \
              -Wunreachable-code                \
              -Wmissing-declarations            \
              -Wshadow                          \
              -Wswitch-default                  \
              -Wswitch-enum                     \
              -Wcast-align                      \
              -Wmissing-include-dirs            \
              -Winit-self                       \
              -gdwarf-2                         \
              -fno-exceptions                   \
              -O2                               \
              -ffunction-sections               \
              -fdata-sections

CFLAGS      = $(GCCFLAGS)                       \
              -x c                              \
              -std=c99

CPPFLAGS    = $(GCCFLAGS)                       \
              $(TGT_CPPFLAGS)                   \
              -x c++                            \
              -fno-rtti                         \
              -fstrict-enums                    \
              -fno-use-cxa-atexit               \
              -fno-use-cxa-get-exception-ptr    \
              -fno-nonansi-builtins             \
              -fno-threadsafe-statics           \
              -fno-enforce-eh-specs             \
              -ftemplate-depth=4096

AFLAGS      = $(GCCFLAGS)                       \
              $(TGT_CFLAGS)                     \
              $(TGT_AFLAGS)                     \
              -x assembler

LFLAGS      = $(GCCFLAGS)                       \
              $(TGT_LFLAGS)                     \
              -x none                           \
              -nostartfiles                     \
              -Wl,--gc-sections

# ------------------------------------------------------------------------------
# Main-Dependencies (app: all)
# ------------------------------------------------------------------------------
.PHONY: all
all: clean_prj version $(APP)_flash.hex $(APP)_nm.txt $(APP).elf


# ------------------------------------------------------------------------------
# Main-Dependencies (app: rebuild)
# ------------------------------------------------------------------------------
.PHONY: rebuild
rebuild: clean_all all


FILES_BIN = $(PATH_BIN)/MLO                         \
            $(PATH_BIN)/ref_app.bin                 \
            $(PATH_BIN)/ref_app.elf                 \
            $(PATH_BIN)/ref_app.hex                 \
            $(PATH_BIN)/ref_app.lss                 \
            $(PATH_BIN)/ref_app.map                 \
            $(PATH_BIN)/ref_app_cppfilt.txt         \
            $(PATH_BIN)/ref_app_flash.bin           \
            $(PATH_BIN)/ref_app_flash.hex           \
            $(PATH_BIN)/ref_app_nm.txt              \
            $(PATH_BIN)/ref_app_readelf.txt         \
            $(PATH_BIN)/ref_app_size.txt

# ------------------------------------------------------------------------------
# clean project
# ------------------------------------------------------------------------------
.PHONY: clean_prj
clean_prj:
	@-$(ECHO) +++ cleaning project
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(MKDIR) -p $(PATH_OBJ)
	@-$(MKDIR) -p $(PATH_ERR)
	@-$(MKDIR) -p $(PATH_SRC)
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(RM) -f $(FILES_BIN)   > NUL  2> NUL


# ------------------------------------------------------------------------------
# clean all
# ------------------------------------------------------------------------------
.PHONY: clean_all
clean_all:
	@-$(ECHO) +++ cleaning all
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(MKDIR) -p $(PATH_OBJ)
	@-$(MKDIR) -p $(PATH_ERR)
	@-$(MKDIR) -p $(PATH_SRC)
	@-$(MKDIR) -p $(PATH_BIN)
	@-$(RM) -rf $(PATH_OBJ)   > NUL  2> NUL
	@-$(RM) -rf $(PATH_ERR)   > NUL  2> NUL
	@-$(RM) -rf $(PATH_SRC)   > NUL  2> NUL
	@-$(RM) -f $(FILES_BIN)   > NUL  2> NUL

# ------------------------------------------------------------------------------
# print the GNUmake version and the compiler version
# ------------------------------------------------------------------------------
.PHONY: version
version:
  # Print the GNU make version and the compiler version
	@$(ECHO) GNUmake version...
	@$(MAKE) --version
	@$(ECHO) GCC version...
	@$(CL) -v


# ------------------------------------------------------------------------------
# link/locate application and generate an assembly list file
# ------------------------------------------------------------------------------
$(APP).elf : $(LINKER_DEFINITION_FILE) $(FILES_O)
	@-$(ECHO) +++ linking application to generate: $(APP).elf
	@-$(CL) $(LFLAGS) $(FILES_O) -Wl,-T$(LINKER_DEFINITION_FILE),-Map,$(APP).map -o $(APP).elf
	@-$(ECHO) +++ generating assembly list file: $(APP).lss
	@-$(OBJDUMP) -h -S $(APP).elf > $(APP).lss


# ------------------------------------------------------------------------------
# parse the object files to obtain symbol information, and create a size summary
# ------------------------------------------------------------------------------
$(APP)_nm.txt : $(APP).elf
	@-$(ECHO) +++ parsing symbols with nm to generate: $(APP)_nm.txt
	@-$(NM) --numeric-sort --print-size $(APP).elf > $(APP)_nm.txt
	@-$(ECHO) +++ demangling symbols with c++filt to generate: $(APP)_cppfilt.txt
	@-$(NM) --numeric-sort --print-size $(APP).elf | $(CPPFILT) > $(APP)_cppfilt.txt
	@-$(ECHO) +++ parsing symbols with readelf to generate: $(APP)_readelf.txt
	@-$(READELF) --syms $(APP).elf > $(APP)_readelf.txt
	@-$(ECHO) +++ creating size summary table with size to generate: $(APP)_size.txt
	@-$(SIZE) -A -t $(APP).elf > $(APP)_size.txt


# ------------------------------------------------------------------------------
# create hex mask
# ------------------------------------------------------------------------------
$(APP)_flash.hex : $(APP).elf
	@-$(ECHO) +++ creating hex and bin modules: $(APP).hex, etc.
	@-$(OBJCOPY) -O ihex $(APP).elf $(APP).hex
	@-$(OBJCOPY) -S -O binary $(APP).elf $(APP).bin
	@-$(HEX_MANIP) outFile=$(APP)_flash.hex mloFile=$(PATH_BIN)/MLO binFile=$(APP)_flash.bin inFile=$(APP).hex elfFile=$(APP).elf $(HEX_MANIP_SCRIPT_FILE)


# ------------------------------------------------------------------------------
# Dependencyfile include (build)
#
# Include all dependency (*.d) files generated previously from the compiler.
# If the files do not exist then the includes will be ignored.
# ------------------------------------------------------------------------------
ifneq ($(MAKECMDGOALS),rebuild)
-include $(subst .o,.d,$(FILES_O))       # for example tmp/obj/sys_start.d, tmp/obj/mcal_cpu.d, etc
endif


# ------------------------------------------------------------------------------
# include the pattern build rules
# ------------------------------------------------------------------------------
include $(PATH_APP_MAKE)/app_rules.gmk
